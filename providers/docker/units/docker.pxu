# Copyright 2016 Canonical Ltd.
# All rights reserved.
#
# Written by:
#   Sylvain Pineau <sylvain.pineau@canonical.com>

unit: category
id: docker
_name: Docker containers

id: docker_resource
plugin: resource
category_id: docker
_summary: Configure docker jobs
_description:
 Configure arch image prefix (if needed) and docker compose command
command:
 echo arch: $SNAP_ARCH
 case $SNAP_ARCH in
   amd64)
     echo 'arch_supported: yes'
     echo 'image_prefix: '
   ;;
   armhf)
     echo 'arch_supported: yes'
     echo 'image_prefix: armhf/'
   ;;
   *)
     echo "arch_supported: no"
     echo 'image_prefix: '
   ;;
 esac
 if [[ -z $SNAP ]]; then
     echo 'compose_command: docker-compose'
 else
     echo 'compose_command: docker.compose'
 fi
 #avoid escape '{}' in docker inspect
 echo 'path: {{.Path}}'
 echo 'image: {{.Config.Image}}'
 echo 'status: {{.State.Status}}'
 echo 'restartPolicy: {{.HostConfig.RestartPolicy.Name}}'
 echo 'maximumRetryCount: {{.HostConfig.RestartPolicy.MaximumRetryCount}}'
 echo 'restartCount: {{.RestartCount}}'
estimated_duration: 1s
flags: preserve-locale

id: docker/version
user: root
category_id: docker
requires: snap.name == 'docker'
command: docker version
_summary: Display docker version information
flags: simple preserve-cwd

id: docker/info
user: root
category_id: docker
requires: snap.name == 'docker'
command: docker info
_summary: Display system-wide information about docker
flags: simple preserve-cwd

unit: template
template-resource: docker_resource
template-unit: job
id: docker/hello-world_{arch}
user: root
category_id: docker
requires:
 snap.name == 'docker'
 docker_resource.arch_supported == 'yes'
command: docker run --rm {image_prefix}hello-world
_summary: Download and run trivial hello-world container
flags: simple preserve-cwd

unit: template
template-resource: docker_resource
template-unit: job
id: docker/run_{arch}
user: root
category_id: docker
requires:
 snap.name == 'docker'
 docker_resource.arch_supported == 'yes'
command: docker run --rm {image_prefix}ubuntu echo 'Hello world'
_summary: Download and run ubuntu container
flags: simple preserve-cwd

unit: template
template-resource: docker_resource
template-unit: job
id: docker/interative_{arch}
user: root
category_id: docker
requires:
 snap.name == 'docker'
 docker_resource.arch_supported == 'yes'
command: docker run --rm -i {image_prefix}ubuntu bash <<< "echo 'Hello world'"
_summary: Test an interactive shell in Ubuntu container
flags: simple preserve-cwd

unit: template
template-resource: docker_resource
template-unit: job
id: docker/diff_{arch}
user: root
category_id: docker
requires:
 snap.name == 'docker'
 docker_resource.arch_supported == 'yes'
command:
 set -e
 ID=$(docker run -dit --name test {image_prefix}ubuntu mkdir /home/test)
 docker diff $ID | grep 'A /home/test'
 docker rm -f test
_summary: Test changes to files in Ubuntu container
flags: simple preserve-cwd

unit: template
template-resource: docker_resource
template-unit: job
id: docker/copy_{arch}
user: root
category_id: docker
requires:
 snap.name == 'docker'
 docker_resource.arch_supported == 'yes'
command:
 set -e
 ID=$(docker run -dit --name test {image_prefix}ubuntu touch /home/file)
 docker diff $ID | grep 'A /home/file'
 #A readable&writable path for docker snap
 file_path=/var/snap/docker/common/
 docker cp $ID:/home/file $file_path
 docker cp $file_path/file $ID:/home/new_file
 docker diff $ID | grep 'A /home/new_file'
 docker rm -f test
_summary: Test copy a file bwtween a container and local filesystem
flags: simple preserve-cwd

unit: template
template-resource: docker_resource
template-unit: job
id: docker/inspect_{arch}
user: root
category_id: docker
requires:
 snap.name == 'docker'
 docker_resource.arch_supported == 'yes'
command:
 set -e
 ID=$(docker run -dit --name test {image_prefix}ubuntu bash)
 path=$(docker inspect -f {path} $ID)
 image=$(docker inspect -f {image} $ID)
 [ $path = "bash" ] || exit 1
 [ $image = "ubuntu" ] || exit 1
 docker rm -f test
_summary: Test query low-level information on a docker object
flags: simple preserve-cwd

unit: template
template-resource: docker_resource
template-unit: job
id: docker/kill_{arch}
user: root
category_id: docker
requires:
 snap.name == 'docker'
 docker_resource.arch_supported == 'yes'
command:
 set -e
 ID=$(docker run -dit --name test {image_prefix}ubuntu bash)
 docker ps --no-trunc | grep $ID
 docker rename $ID test_2
 docker kill test_2
 docker rm -f test_2
_summary: Test killing containers
flags: simple preserve-cwd

unit: template
template-resource: docker_resource
template-unit: job
id: docker/start-stop_{arch}
user: root
category_id: docker
requires:
 snap.name == 'docker'
 docker_resource.arch_supported == 'yes'
command:
 set -e
 ID=$(docker run -d --name test {image_prefix}redis)
 docker ps | grep test | grep 'Up'
 docker stop test
 ret=$(docker wait $ID)
 [ $ret != 0 ] && exit 1
 docker ps -a | grep test | grep 'Exited'
 docker start test
 docker rm -f test
_summary: Start and stop a single container
flags: simple preserve-cwd

unit: template
template-resource: docker_resource
template-unit: job
id: docker/build-single_{arch}
user: root
category_id: docker
requires:
 snap.name == 'docker'
 docker_resource.arch_supported == 'yes'
command:
 set -e
 dockerfile=$(cat <<EOF
   FROM {image_prefix}alpine
   CMD echo "hello-world"
 EOF
 )
 echo "$dockerfile" | docker build -t test -
 docker run --rm -it test
 docker ps -a | grep 'test' || exit 0
 echo "The container is still available"
 exit 1
_summary: Test docker build with a single container
flags: simple preserve-cwd

unit: template
template-resource: docker_resource
template-unit: job
id: docker/export-and-import_{arch}
user: root
category_id: docker
requires:
 snap.name == 'docker'
 docker_resource.arch_supported == 'yes'
command:
 set -e
 ID=$(docker run -dit --name test {image_prefix}ubuntu bash)
 docker ps --no-trunc | grep $ID
 #A readable&writable path for docker snap
 tarball_file=/var/snap/docker/common/ubuntu.tar
 docker export $ID > $tarball_file
 cat $tarball_file | sudo docker import - plainbox/ubuntu:v1.0
 docker images -a | grep 'plainbox/ubuntu'
 docker rm -f test
 docker rmi plainbox/ubuntu:v1.0
_summary: Test docker import and export a docker container
flags: simple preserve-cwd

unit: template
template-resource: docker_resource
template-unit: job
id: docker/commit_{arch}
user: root
category_id: docker
requires:
 snap.name == 'docker'
 docker_resource.arch_supported == 'yes'
command:
 set -e
 ID=$(docker run -dit --name test {image_prefix}ubuntu mkdir /home/test)
 docker commit $ID ubuntu-plainbox
 docker images | grep 'ubuntu-plainbox'
 docker run ubuntu [ -d /home/test ] && exit 1 || echo 'Directory not found'
 docker run ubuntu-plainbox [ -d /home/test ] && echo 'Directory found' || exit 1
 docker rm -f $(docker ps -q -a)
 docker rmi ubuntu-plainbox
_summary: Test docker commit a change to a single container
flags: simple preserve-cwd

unit: template
template-resource: docker_resource
template-unit: job
id: docker/save-and-load_{arch}
user: root
category_id: docker
requires:
 snap.name == 'docker'
 docker_resource.arch_supported == 'yes'
command:
 set -e
 docker pull {image_prefix}ubuntu
 docker save {image_prefix}ubuntu > /var/snap/docker/common/ubuntu.tar
 docker load < /var/snap/docker/common/ubuntu.tar
 docker images -a | grep ubuntu
_summary: Test docker save and load a docker image
flags: simple preserve-cwd

unit: template
template-resource: docker_resource
template-unit: job
id: docker/compose-single_{arch}
user: root
category_id: docker
requires:
 snap.name == 'docker'
 docker_resource.arch_supported == 'yes'
command:
 set -e
 #A readable&writable path for docker snap
 compose_file=/var/snap/docker/common/docker-compose.yaml
 echo "test:
   image: {image_prefix}ubuntu
   command: bash
   tty: true" > $compose_file
 {compose_command} -f $compose_file up -d
 docker ps | grep '_test_1' | grep 'Up'
 {compose_command} -f $compose_file kill
 docker ps -a | grep '_test_1' | grep 'Exited (137)'
 {compose_command} -f $compose_file rm -v -f
 docker ps -a | grep '_test_1' || exit 0
 echo "The container is still available"
 exit 1
_summary: Test docker compose with a single container
flags: simple preserve-cwd

unit: template
template-resource: docker_resource
template-unit: job
id: docker/compose-and-basic_{arch}
user: root
category_id: docker
requires:
 snap.name == 'docker'
 docker_resource.arch_supported == 'yes'
command:
 set -e
 #read content from stdin
 yml=$(cat <<EOF
 test:
   image: ubuntu
   command: bash
   tty: true
 EOF
 )
 echo "$yml" | {compose_command} -f - pull
 echo "$yml" | {compose_command} -f - create
 echo "$yml" | {compose_command} -f - start
 docker ps | grep '_test_1' | grep 'Up'
 echo "$yml" | {compose_command} -f - stop
 docker ps -a | grep '_test_1' | grep 'Exited'
 echo "$yml" | {compose_command} -f - up -d --scale test=3
 docker ps | grep 'test' | grep -c 'Up'
 ret=$(docker ps -a | grep 'test' | grep -c 'Up')
 [ $ret != 3 ] && exit 1
 echo "$yml" | {compose_command} -f - up -d --scale test=1
 ret=$(docker ps -a | grep 'test' | grep -c 'Up')
 [ $ret != 1 ] && exit 1
 echo "$yml" | {compose_command} -f - down
 docker ps -a | grep '_test' || exit 0
 echo "The container is still available"
 exit 1
_summary: Test docker compose and basic command
flags: simple preserve-cwd

unit: template
template-resource: docker_resource
template-unit: job
id: docker/deploy-registry_{arch}
user: root
category_id: docker
requires:
 snap.name == 'docker'
 docker_resource.arch_supported == 'yes'
command:
 set -e
 #A readable&writable path for docker snap
 auth_folder=/var/snap/docker/common/auth
 mkdir -p $auth_folder
 docker run --entrypoint htpasswd registry:2 -Bbn user passwd > $auth_folder/htpasswd
 docker run -d -p 5000:5000 --restart=always --name registry \
   -v $auth_folder:/auth \
   -e "REGISTRY_AUTH=htpasswd" \
   -e "REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm" \
   -e REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \
    registry:2
 docker pull {image_prefix}ubuntu
 docker tag ubuntu localhost:5000/{image_prefix}ubuntu
 docker login --username user --password passwd localhost:5000
 docker push localhost:5000/{image_prefix}ubuntu
 docker pull localhost:5000/{image_prefix}ubuntu
 docker stop registry
 docker rm -v registry
_summary: Deploy a registry server and run it on localhost
flags: simple preserve-cwd

unit: template
template-resource: docker_resource
template-unit: job
id: docker/restart-on-failure_{arch}
user: root
category_id: docker
requires:
 snap.name == 'docker'
 docker_resource.arch_supported == 'yes'
command:
 set -e
 dockerfile=$(cat <<EOF
   FROM {image_prefix}ubuntu
   CMD sleep 1; exit 1
 EOF
 )
 echo "$dockerfile" | docker build -t test-image -
 ID=$(docker run --restart on-failure:3 -dit test-image)
 restartPolicy=$(docker inspect  -f {restartPolicy} $ID)
 [ $restartPolicy = on-failure ] || exit 1
 maximumRetryCount=$(docker inspect  -f {maximumRetryCount} $ID)
 [ $maximumRetryCount = 3 ] || exit 1
 sleep 5
 restartCount=$(docker inspect -f {restartCount} $ID)
 [ $restartCount = 3 ] || exit 1
_summary: Test container restart policy with on_failure applied
flags: simple preserve-cwd

unit: template
template-resource: docker_resource
template-unit: job
id: docker/restart-always_{arch}
user: root
category_id: docker
requires:
 snap.name == 'docker'
 docker_resource.arch_supported == 'yes'
command:
 set -e
 dockerfile=$(cat <<EOF
   FROM {image_prefix}ubuntu
   CMD sleep 1
 EOF
 )
 echo "$dockerfile" | docker build -t test-image -
 ID=$(docker run --restart always -dit --name test test-image)
 restartPolicy=$(docker inspect  -f {restartPolicy} $ID)
 [ $restartPolicy = always ] || exit 1
 sleep 5
 restartCount=$(docker inspect -f {restartCount} $ID)
 [ $restartCount -gt 1 ] || exit 1
 docker rm -f test
_summary: Test container restart policy with always applied
flags: simple preserve-cwd

unit: template
template-resource: docker_resource
template-unit: job
id: docker/update_{arch}
user: root
category_id: docker
requires:
 snap.name == 'docker'
 docker_resource.arch_supported == 'yes'
command:
 set -e
 ID=$(docker run --restart always -dit --name test {image_prefix}ubuntu bash)
 restartPolicy=$(docker inspect -f {restartPolicy} $ID)
 [ $restartPolicy = always ] || exit 1
 docker update --restart=no $ID
 restartPolicy=$(docker inspect -f {restartPolicy} $ID)
 [ $restartPolicy = no ] || exit 1
 docker rm -f test
_summary: Test update configuration of one container
flags: simple preserve-cwd

unit: template
template-resource: docker_resource
template-unit: job
id: docker/compose-restart_{arch}
user: root
category_id: docker
requires:
 snap.name == 'docker'
 docker_resource.arch_supported == 'yes'
command:
 set -e
 #A readable&writable path for docker snap
 compose_file=/var/snap/docker/common/docker-compose.yaml
 echo "test:
   image: {image_prefix}ubuntu
   command: sleep 1
   restart: always" > $compose_file
 {compose_command} -f $compose_file up -d
 ID=$({compose_command} -f $compose_file ps -q test)
 restartPolicy=$(docker inspect -f {restartPolicy} $ID)
 [ $restartPolicy = always ] || exit 1
 sleep 5
 restartCount=$(docker inspect -f {restartCount} $ID)
 [ $restartCount -gt 1 ] || exit 1
_summary: Test compose a container with restart policy applied
flags: simple preserve-cwd

id: docker-full
unit: test plan
_name: Fully automated QA tests for Docker containers
_description:
 QA test plan for Docker containers (docker and docker-compose)
estimated_duration: 120
include:
    docker/info
    docker/version
    docker/hello-world_.*
    docker/run_.*
    docker/interative_.*
    docker/diff_.*
    docker/copy_.*
    docker/inspect_.*
    docker/kill_.*
    docker/build-single_.*
    docker/start-stop_.*
    docker/deploy-registry_.*
    docker/export-and-import_.*
    docker/save-and-load_.*
    docker/commit_.*
    docker/update_.*
    docker/restart-on-failure_.*
    docker/restart-always_.*
    docker/compose-single_.*
    docker/compose-and-basic_.*
    docker/compose-restart_.*
bootstrap_include:
    docker_resource
